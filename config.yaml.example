# Application Configuration
app:
  name: "Telegram Bot API"
  version: "1.0.0"
  environment: "development"  # development, staging, production
  debug: true

# Server Configuration
server:
  host: "localhost"
  port: 8080
  read_timeout: 30s
  write_timeout: 30s
  idle_timeout: 120s

# Database Configuration
database:
  host: "localhost"
  port: 5432
  user: "postgres"
  password: "your_password_here"
  name: "telegram_bot"
  sslmode: "disable"  # disable, require, verify-ca, verify-full
  max_open_conns: 25
  max_idle_conns: 5
  conn_max_lifetime: 300s

# JWT Configuration
jwt:
  secret: "your-super-secret-jwt-key-at-least-32-characters-long"
  expiry: 24h
  refresh_expiry: 168h  # 7 days

# Google Places API Configuration
# Note: Google Places API offers a generous free tier perfect for testing
# - $200 free credit monthly (covers ~40,000 requests)
# - No charges until you exceed the free tier
google:
  places_api_key: "your-google-places-api-key"
  timeout: 10s

# Telegram Bot Configuration
telegram:
  bot_token: "your-telegram-bot-token"
  webhook_url: "https://your-domain.com/api/v1/telegram/webhook"
  timeout: 30s

# Redis Configuration (Optional - for caching)
redis:
  host: "localhost"
  port: 6379
  password: ""
  db: 0
  pool_size: 10
  min_idle_conns: 5

# Logging Configuration
logging:
  level: "info"  # debug, info, warn, error
  format: "json"  # json, text
  output: "stdout"  # stdout, stderr, file
  file_path: "logs/app.log"  # used when output is "file"

# Rate Limiting Configuration
rate_limit:
  requests_per_minute: 60
  burst: 10
  enabled: true

# CORS Configuration
cors:
  enabled: true
  allowed_origins:
    - "http://localhost:3000"
    - "https://your-frontend-domain.com"
  allowed_methods:
    - "GET"
    - "POST"
    - "PUT"
    - "DELETE"
    - "OPTIONS"
  allowed_headers:
    - "Content-Type"
    - "Authorization"
    - "X-Requested-With"
  allow_credentials: true
  max_age: 86400  # 24 hours